
name: CD – Deploy CRUD (Client)

on:
  push:
    branches: [ master, develop, fix/**,feat/** ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  # ─────────────────────────── BUILD ────────────────────────────────
  build-client:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}
      environment: ${{ steps.generate-tag.outputs.environment }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Tag
        id: generate-tag
        run: |
          DATE="$(date '+%d.%m.%Y.%H.%M.%S')"
          TAG="${DATE}-${ENVIRONMENT}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "📦 Generated tag: ${TAG}"

      - id: build
        name: Build & push multi-arch image
        run: |
          export TAG="${{ steps.generate-tag.outputs.tag }}"
          echo "🐳 Building and pushing image: ${USERNAME}/${REPO}:${TAG}"
          chmod +x ci/build-publish.sh
          ./ci/build-publish.sh "$ENVIRONMENT"      # scriptul scrie tag=$TAG în GITHUB_OUTPUT
          
  
  

  update-docker-files:
    needs: build-client
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.build-client.outputs.tag }}
      ENVIRONMENT: ${{ needs.build-client.outputs.environment }}
    steps:
      - name: Checkout other repository
        uses: actions/checkout@v2
        with:
          repository: 'mycodeschool-projecs/crud-docker-files'
          token: ${{ secrets.DEPLOY_ACCESS_TOKEN }}
          path: 'crud-docker-files'

      - name: Update and commit app version in docker-compose.yaml in other repository
        run: |
          cd crud-docker-files/
          echo -e "Current ./docker-compose.yaml\n$(cat docker-compose.yaml)"
          echo -e "NEW image ${{ env.TAG }}"
          sed -i -E "s_(mycodeschool/crud-client-api:)([^\" ]*)_\1${{ env.TAG }}_" docker-compose.yaml
          echo -e "Updated ./docker-compose.yaml\n$(cat docker-compose.yaml)"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "new app version: ${{ env.TAG }}"
          echo -e "-----Commited ..."
          echo -e "-----Before push to  head ${{ github.ref_name }}"
          git push origin HEAD:master 


  update-k8s-files:
    needs: build-client
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.build-client.outputs.tag }}
      ENVIRONMENT: ${{ needs.build-client.outputs.environment }}
    steps:
      - name: Checkout k8s-files repository
        uses: actions/checkout@v2
        with:
          repository: 'mycodeschool-projecs/crud-k8s-files'
          token: ${{ secrets.DEPLOY_ACCESS_TOKEN }}
          path: 'crud-k8s-files'

      - name: Update and commit app version in auth-service.yaml in other repository
        run: |
          cd crud-k8s-files/k8s-files-raw/
          echo -e "Current ./app-client.yaml\n$(cat app-client.yaml)"
          sed -i -E 's_(mycodeschool/crud-client:)([^"]*)_\1'${{ env.TAG }}'_' app-client.yaml
          echo -e "Updated ./app-client.yaml\n$(cat app-client.yaml)"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "new app version: ${{ env.TAG }}"
          git push origin HEAD:master
          
          
          

  # ─────────────────────────── DEPLOY (master) ─────────────────────
#  deploy-ec2:
#    needs: build-client
#    if: github.ref == 'refs/heads/master'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Update tag & restart client
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host:     ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USER }}
#          key:      ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            set -euo pipefail
#
#            ENV_FILE=/srv/online-shop/.env
#            NEW_TAG="${{ needs.build-client.outputs.tag }}"
#
#            echo "🔄  Set CLIENT_TAG=$NEW_TAG"
#            if grep -q '^CLIENT_TAG=' "$ENV_FILE"; then
#              sudo sed -i "s/^CLIENT_TAG=.*/CLIENT_TAG=$NEW_TAG/" "$ENV_FILE"
#            else
#              echo "CLIENT_TAG=$NEW_TAG" | sudo tee -a "$ENV_FILE"
#            fi
#
#            echo "🚢  Pull & restart client"
#            # dacă fișierul tău se numește docker-compose.yml, schimbă extensia aici
#            sudo docker compose -f /srv/online-shop/docker-compose.yaml pull client
#            sudo docker compose -f /srv/online-shop/docker-compose.yaml up -d --no-deps client
